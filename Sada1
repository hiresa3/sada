import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import StreamingService from '../../../../../components/Web/Addons/redesign/StreamingDevice';
import {
  streamingDeviceProps,
  devicesProps,
  PropsAccessoryDetailsMoreThan3,
  streamingDevicePropsAccessoryDetails1,
  streamingDevice143line,
  streamingDevice197line,
  streamingDevice197lineQuantityDefined,
  streamingDevicePropsAccessoryDetails1sorIDGivenQuantityUndefined,
  accessoryDetails1andNoProductRefData,
  streamingDevicePropsAccessoryDetailsNewProps,
  streamingDevicePropsAccessoryDetailsNewProps1,
  PropsAccessoryDetailsMoreThan3NewProps,
  streamingDevice143lineDueMonthly,
  addonstestData,
} from './streamingDevicesTestData';
import { streamingDeviceConstants } from './constants';
import { spyFuncOn } from '../../../Common/jestCommon';

describe('Check for Streaming Devices', () => {
  // Existing tests
  // ...

  test('Check for block heading when flow type is not LTE and device type is mobile/Tablet', () => {
    jest.useFakeTimers();
    spyFuncOn(streamingDeviceConstants.getFlowTypeFuncName, streamingDeviceConstants.flowtype5G);
    render(<StreamingService {...streamingDeviceProps} showAddNotification showAddonNotification={jest.fn()} selectedProdID="ASK-STI6220" />);
    const fiveGHeader = screen.getByText(streamingDeviceConstants.fiveGHeaderTextToCompare);
    expect(fiveGHeader).toBeInTheDocument();
    jest.advanceTimersByTime(3000);
  });

  test('Check for block heading when flow type is not LTE and device type is mobile/Tablet', () => {
    jest.useFakeTimers();
    spyFuncOn(streamingDeviceConstants.getFlowTypeFuncName, streamingDeviceConstants.flowtype5G);
    render(<StreamingService {...streamingDeviceProps} showAddNotification showAddonNotification={jest.fn()} selectedProdID="39425" />);
    const fiveGHeader = screen.getByText(streamingDeviceConstants.fiveGHeaderTextToCompare);
    expect(fiveGHeader).toBeInTheDocument();
    jest.advanceTimersByTime(3000);
  });

  test('Check for block heading when flow type is not LTE and device type is mobile/Tablet', () => {
    jest.useFakeTimers();
    devicesProps.accessoryDetails.pop();
    devicesProps.accessoryDetails.pop();
    spyFuncOn(streamingDeviceConstants.getFlowTypeFuncName, streamingDeviceConstants.flowtype5G);
    render(
      <StreamingService
        {...devicesProps}
        addOnLoadingDone
        getskipStatus={jest.fn()}
        showAddonNotification={jest.fn()}
        selectedProdID="ASK-STI6220"
      />,
    );
    const fiveGHeader = screen.getByText(streamingDeviceConstants.fiveGHeaderTextToCompare);
    expect(fiveGHeader).toBeInTheDocument();
    jest.advanceTimersByTime(3000);
  });

  test('Check for Sub-Header when flow type is not LTE and device type is mobile/Tablet', () => {
    render(<StreamingService {...streamingDeviceProps} />);
    const fiveGSubHeader = screen.getByText(streamingDeviceConstants.fiveGSubHeaderTextToCompare);
    expect(fiveGSubHeader).toBeInTheDocument();
  });

  test('Check for Container Class for Mobile view', () => {
    spyFuncOn(streamingDeviceConstants.mobileTypeFuncName, streamingDeviceConstants.viewportFuncValueMobile);
    // expect(container.getElementsByClassName(streamingDeviceConstants.classNameForContainerClassMobileVi
