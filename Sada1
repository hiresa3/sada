import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import StreamingService from '../../../../../components/Web/Addons/redesign/StreamingDevice';
import {
  streamingDeviceProps,
  devicesProps,
  PropsAccessoryDetailsMoreThan3,
  streamingDevicePropsAccessoryDetails1,
  streamingDevice143line,
  streamingDevice197line,
  streamingDevice197lineQuantityDefined,
  streamingDevicePropsAccessoryDetails1sorIDGivenQuantityUndefined,
  accessoryDetails1andNoProductRefData,
  streamingDevicePropsAccessoryDetailsNewProps,
  streamingDevicePropsAccessoryDetailsNewProps1,
  PropsAccessoryDetailsMoreThan3NewProps,
  streamingDevice143lineDueMonthly,
  addonstestData,
} from './streamingDevicesTestData';
import { streamingDeviceConstants } from './constants';
import { spyFuncOn } from '../../../Common/jestCommon';

describe('Check for Streaming Devices', () => {
  // Existing tests
  // ...

  test('Check for block heading when flow type is not LTE and device type is mobile/Tablet', () => {
    jest.useFakeTimers();
    spyFuncOn(streamingDeviceConstants.getFlowTypeFuncName, streamingDeviceConstants.flowtype5G);
    render(<StreamingService {...streamingDeviceProps} showAddNotification showAddonNotification={jest.fn()} selectedProdID="ASK-STI6220" />);
    const fiveGHeader = screen.getByText(streamingDeviceConstants.fiveGHeaderTextToCompare);
    expect(fiveGHeader).toBeInTheDocument();
    jest.advanceTimersByTime(3000);
  });

  test('Check for block heading when flow type is not LTE and device type is mobile/Tablet', () => {
    jest.useFakeTimers();
    spyFuncOn(streamingDeviceConstants.getFlowTypeFuncName, streamingDeviceConstants.flowtype5G);
    render(<StreamingService {...streamingDeviceProps} showAddNotification showAddonNotification={jest.fn()} selectedProdID="39425" />);
    const fiveGHeader = screen.getByText(streamingDeviceConstants.fiveGHeaderTextToCompare);
    expect(fiveGHeader).toBeInTheDocument();
    jest.advanceTimersByTime(3000);
  });

  test('Check for block heading when flow type is not LTE and device type is mobile/Tablet', () => {
    jest.useFakeTimers();
    devicesProps.accessoryDetails.pop();
    devicesProps.accessoryDetails.pop();
    spyFuncOn(streamingDeviceConstants.getFlowTypeFuncName, streamingDeviceConstants.flowtype5G);
    render(
      <StreamingService
        {...devicesProps}
        addOnLoadingDone
        getskipStatus={jest.fn()}
        showAddonNotification={jest.fn()}
        selectedProdID="ASK-STI6220"
      />,
    );
    const fiveGHeader = screen.getByText(streamingDeviceConstants.fiveGHeaderTextToCompare);
    expect(fiveGHeader).toBeInTheDocument();
    jest.advanceTimersByTime(3000);
  });

  test('Check for Sub-Header when flow type is not LTE and device type is mobile/Tablet', () => {
    render(<StreamingService {...streamingDeviceProps} />);
    const fiveGSubHeader = screen.getByText(streamingDeviceConstants.fiveGSubHeaderTextToCompare);
    expect(fiveGSubHeader).toBeInTheDocument();
  });

  test('Check for Container Class for Mobile view', () => {
    spyFuncOn(streamingDeviceConstants.mobileTypeFuncName, streamingDeviceConstants.viewportFuncValueMobile);
    // expect(container.getElementsByClassName(streamingDeviceConstants.classNameForContainerClassMobileView).length).toBe(1);
  });

  test('Check for pagination in mobile view', () => {
    spyFuncOn(streamingDeviceConstants.mobileTypeFuncName, streamingDeviceConstants.viewportFuncValueMobile);
    // expect(container.getElementsByClassName(streamingDeviceConstants.classNameForSwiperPagination).length).toBe(1);
  });

  test('Check for cartid and prodId is same and prodType equals streaming services with quantity 1', () => {
    jest.useFakeTimers();
    render(<StreamingService {...streamingDevicePropsAccessoryDetails1} />);
    jest.advanceTimersByTime(3000);
  });

  test('Check for cartid and prodId is same and prodType equals streaming services with quantity 1', () => {
    jest.useFakeTimers();
    render(<StreamingService {...streamingDevicePropsAccessoryDetailsNewProps} />);
    jest.advanceTimersByTime(3000);
  });

  test('Check for cartid and prodId is same and prodType equals streaming services with quantity 1', () => {
    jest.useFakeTimers();
    render(<StreamingService {...streamingDevicePropsAccessoryDetailsNewProps1} />);
    jest.advanceTimersByTime(3000);
  });

  test('Check for Tablet view and streamingdevice Heading', () => {
    spyFuncOn(streamingDeviceConstants.tabletTypeFuncName, streamingDeviceConstants.viewportFuncValueTablet);
    // expect(container.getElementsByClassName(streamingDeviceConstants.classNameForTabletHeading).length).toBe(1);
  });

  // test('Check for prodType is not streaming Service devices are more than 3', () => {
  //   spyFuncOn(streamingDeviceConstants.tabletTypeFuncName, streamingDeviceConstants.viewportFuncValueTablet);
  //   render(<StreamingService {...streamingDeviceProps} />);
  //   const StreamDevice = screen.getByText(streamingDeviceConstants.StreamingDeviceTextToCompare);
  //   expect(StreamDevice).toBeInTheDocument();
  // });

  test('when cartid and prodId is same of DueTodayList and prodType is not streaming Service', () => {
    jest.useFakeTimers();
    spyFuncOn(streamingDeviceConstants.mobileTypeFuncName, streamingDeviceConstants.viewportFuncValueMobile);
    render(<StreamingService {...PropsAccessoryDetailsMoreThan3} />);
    jest.advanceTimersByTime(3000);
  });

  test('when cartid and prodId is same of DueTodayList and prodType is not streaming Service', () => {
    spyFuncOn(streamingDeviceConstants.mobileTypeFuncName, streamingDeviceConstants.viewportFuncValueMobile);
    render(<StreamingService {...PropsAccessoryDetailsMoreThan3NewProps} />);
  });

  test('when cartid and prodId is same of DueMonthlyList and prodType is streaming Service accessorydetails 1 line 305', () => {
    render(<StreamingService {...streamingDevice143line} />);
  });

  test('when cartid and prodId is same of DueMonthlyList and prodType is streaming Service accessorydetails 1 line 305', () => {
    render(<StreamingService {...streamingDevice143lineDueMonthly} />);
  });

  test('when cartid and prodId is same of DueMonthlyList and prodType is streaming Service', () => {
    spyFuncOn(streamingDeviceConstants.mobileTypeFuncName, streamingDeviceConstants.mobileFuncValueFalse);
    render(<StreamingService {...streamingDevice143line} />);
  });

  test('when cartid and prodId is same of DueTodayList and prodType is streamingDevice', () => {
    spyFuncOn('viewport', 'mfapp');
    spyFuncOn('isDesktop', true);
    render(<StreamingService {...streamingDevice197line} disclaimerText="Disclaimer" />);
  });

  test('when cartid and prodId is same of DueTodayList and prodType is streamingDevice', () => {
    render(<StreamingService {...streamingDevice197lineQuantityDefined} />);
  });

  test('Check for swiper in mobile view', () => {
    spyFuncOn(streamingDeviceConstants.mobileTypeFuncName, streamingDeviceConstants.mobileFuncValueFalse);
    // expect(container.getElementsByClassName(streamingDeviceConstants.swiperClassToCompare).length).toBe(4);
  });

  test('when Accessory detail are more than 3 and item compared by productID', () => {
    spyFuncOn(streamingDeviceConstants.tabletTypeFuncName, streamingDeviceConstants.tabletFuncValueFalse);
    // expect(container.getElementsByClassName(streamingDeviceConstants.accessoryDetailsClassToCompare).length).toBe(6);
  });

  test('when Accessory detail are equal to 1 and item compared by sorID ', () => {
    render(<StreamingService {...streamingDevicePropsAccessoryDetails1sorIDGivenQuantityUndefined} />);
  });

  test('when Accessory detail are equal to 1 and item compared by sorID ', () => {
    render(<StreamingService {...accessoryDetails1andNoProductRefData} />);
  });

  test('Check for block heading when flow type is not LTE and device type is mobile/Tablet', () => {
    spyFuncOn(streamingDeviceConstants.getFlowTypeFuncName, streamingDeviceConstants.flowtype5G);
    spyFuncOn('checkIsMidnight', true);
    streamingDeviceProps.accessoryDetails[2].type = 'streamingService';
    render(<StreamingService {...streamingDeviceProps} />);
  });

  test('Check for block heading when flow type is not LTE and device type is mobile/Tablet', () => {
    spyFuncOn(streamingDeviceConstants.getFlowTypeFuncName, streamingDeviceConstants.flowtype5G);
    spyFuncOn('checkIsMidnight', true);
    spyFuncOn('isMobile', true);

    streamingDeviceProps.accessoryDetails[2].type = 'streamingService';
    render(<StreamingService {...streamingDeviceProps} />);
  });

  test('Check for block heading when flow type is not LTE and device type is mobile/Tablet', () => {
    jest.useFakeTimers();
    spyFuncOn(streamingDeviceConstants.getFlowTypeFuncName, streamingDeviceConstants.flowtype5G);
    spyFuncOn('checkIsMidnight', true);
    spyFuncOn('isTablet', true);
    render(<StreamingService {...streamingDeviceProps} />);
    jest.advanceTimersByTime(3000);
  });

  // New Test Cases
  test('renders with default props and verifies heading', () => {
    render(<StreamingService {...streamingDeviceProps} />);
    const header = screen.getByText(streamingDeviceConstants.fiveGHeaderTextToCompare);
    expect(header).toBeInTheDocument();
  });

  test('renders correctly with no accessory details', () => {
    render(<StreamingService {...streamingDeviceProps} accessoryDetails={[]} />);
    const noAccessoriesMessage = screen.getByText('No accessories available');
    expect(noAccessoriesMessage).toBeInTheDocument();
  });

  test('displays correct header and subheader based on props', () => {
    render(<StreamingService {...streamingDeviceProps} />);
    const header = screen.getByText(streamingDeviceConstants.fiveGHeaderTextToCompare);
    const subheader = screen.getByText(streamingDeviceConstants.fiveGSubHeaderTextToCompare);
    expect(header).toBeInTheDocument();
    expect(subheader).toBeInTheDocument();
  });

  test('handles add to cart functionality', () => {
    const postAddToCartMock = jest.fn();
    render(
      <StreamingService
        {...streamingDeviceProps}
        postAddToCart={postAddToCartMock}
      />
    );
    const button = screen.getByRole('button', { name: 'Fire TV Cube Add to Cart' });
    fireEvent.click(button);
    expect(postAddToCartMock).toHaveBeenCalled();
  });

  test('handles remove from cart functionality', () => {
    const postRemoveFromCartMock = jest.fn();
    render(
      <StreamingService
        {...streamingDeviceProps}
        postRemoveCart={postRemoveFromCartMock}
      />
    );
    const button = screen.getByRole('button', { name: 'Fire TV Cube Remove' });
    fireEvent.click(button);
    expect(postRemoveFromCartMock).toHaveBeenCalled();
  });

  test('displays correct message when add to cart is successful', async () => {
    const showAddonNotificationMock = jest.fn();
    render(
      <StreamingService
        {...streamingDeviceProps}
        showAddonNotification={showAddonNotificationMock}
        notifyMessage="Added to cart"
      />
    );
    await waitFor(() => {
      expect(showAddonNotificationMock).toHaveBeenCalledWith('Added to cart');
    });
  });

  test('handles quantity changes for streaming services', () => {
    render(<StreamingService {...streamingDevice197lineQuantityDefined} />);
    const increaseButton = screen.getByRole('button', { name: 'Increase Stream TV by one' });
    const decreaseButton = screen.getByRole('button', { name: 'Decrease Stream TV by one' });
    fireEvent.click(increaseButton);
    fireEvent.click(decreaseButton);
    // Verify the result based on your implementation
  });

  test('renders correctly based on device type and flow type', () => {
    spyFuncOn(streamingDeviceConstants.getFlowTypeFuncName, streamingDeviceConstants.flowtype5G);
    render(<StreamingService {...streamingDeviceProps} />);
    const fiveGHeader = screen.getByText(streamingDeviceConstants.fiveGHeaderTextToCompare);
    expect(fiveGHeader).toBeInTheDocument();
  });

  test('displays correct information for tablet view', () => {
    spyFuncOn(streamingDeviceConstants.tabletTypeFuncName, streamingDeviceConstants.viewportFuncValueTablet);
    render(<StreamingService {...streamingDeviceProps} />);
    const tabletHeading = screen.getByText(streamingDeviceConstants.tabletHeadingTextToCompare);
    expect(tabletHeading).toBeInTheDocument();
  });

  test('verifies behavior with mobile view', () => {
    spyFuncOn(streamingDeviceConstants.mobileTypeFuncName, streamingDeviceConstants.viewportFuncValueMobile);
    render(<StreamingService {...streamingDeviceProps} />);
    const mobileHeader = screen.getByText(streamingDeviceConstants.mobileHeaderTextToCompare);
    expect(mobileHeader).toBeInTheDocument();
  });

  test('verifies rendering with multiple accessories', () => {
    render(<StreamingService {...PropsAccessoryDetailsMoreThan3} />);
    const accessories = screen.getAllByRole('button', { name: /Add to Cart/ });
    expect(accessories.length).toBeGreaterThan(3);
  });

  test('handles error cases for add to cart functionality', async () => {
    const postAddToCartMock = jest.fn(() => {
      throw new Error('Failed to add to cart');
    });
    render(
      <StreamingService
        {...streamingDeviceProps}
        postAddToCart={postAddToCartMock}
      />
    );
    const button = screen.getByRole('button', { name: 'Fire TV Cube Add to Cart' });
    fireEvent.click(button);
    await waitFor(() => {
      expect(postAddToCartMock).toThrow('Failed to add to cart');
    });
  });

  test('renders with different prop combinations', () => {
    render(<StreamingService {...streamingDevicePropsAccessoryDetailsNewProps} />);
    const element = screen.getByText(/Streaming Service/);
    expect(element).toBeInTheDocument();
  });
});

