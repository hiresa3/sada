// GetAction.test.js
import { GetAction } from './GetAction';
import { useDispatch } from 'react-redux';
import { actionTypes } from './actionTypes';
import { eventDispatcher } from './eventDispatcher';
import { PROGRESSIVE, planJourneyCodes } from './constants';

jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
}));

jest.mock('./eventDispatcher', () => ({
  eventDispatcher: jest.fn(),
}));

const mockDispatch = jest.fn();

describe('GetAction', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    useDispatch.mockReturnValue(mockDispatch);
  });

  it('should create an action with correct button and helper text when perks are selected', () => {
    const storeDetails = {
      SessionValues: { planSelectionJourney: PROGRESSIVE },
      progressivePlans: {
        progressivePlanAPiResponse: {
          data: {
            lineLevelPlans: {
              lines: [
                {
                  products: [
                    {
                      plans: [{ planId: 'plan1' }],
                    },
                  ],
                  availablePerks: [{ spoId: 'perk1' }],
                },
              ],
            },
            selectedPlanInfo: { selectedPlan: [{ planId: 'plan1' }] },
            getfwaplansLoaded: true,
            contextInfo: { sessionId: '12345' },
          },
        },
      },
      plansReferenceData: {
        output: { staticContent: { feedbackContextInfo: 'info' } },
      },
    };

    const action = GetAction(
      true,
      true,
      [{ spoId: 'perk1' }],
      { push: jest.fn() },
      storeDetails
    );

    expect(action).toEqual({
      helperText: {
        children: (
          <>
            By continuing, you agree to perk{' '}
            <TextLink
              data-testId="terms-and-conditions"
              data-track='{"type": "link","name": "perks tnc"}'
              onClick={() => {
                mockDispatch({ type: actionTypes.SET_TERMS_AND_CONDITIONS_OVERLAY, response: { selectedPerksTerms: ['perk1'], show: true } });
              }}
            >
              Terms & Conditions
            </TextLink>
            .
          </>
        ),
      },
      buttonGroup: {
        data: [
          {
            use: 'primary',
            children: 'Continue',
            disabled: false,
            onClick: () => {
              if (!true) { // simulating planSelected false
                eventDispatcher('notify', { name: 'Please select your plan to continue' });
                eventDispatcher('openView', { name: 'message displayed' });
                mockDispatch({ type: actionTypes.UPDATE_ERROR_NOTIFICATION, payload: true });
              } else {
                expect(mockDispatch).toHaveBeenCalledWith({
                  type: actionTypes.FEEDBACK_API,
                  feedBackTile: [
                    {
                      planId: 'plan1',
                      tacticLocation: 'AvailablePlans',
                    },
                    {
                      spoId: 'perk1',
                      tacticLocation: 'AvailablePerks',
                    },
                  ],
                  mtn: 'newLine1',
                  dispositionOptionId: 81,
                  lineActivityType: `${getIntendType()}`,
                  selectedLLP: '',
                  feedbackContextInfo: 'info',
                  nbxSessionId: '12345',
                });
                mockDispatch({ type: actionTypes.ADD_PLAN_API, payload: 'progressivePlan', history: { push: jest.fn() }, planSelectionJourney: planJourneyCodes.PROGRESSIVE });
              }
            },
          },
        ],
      },
    });
  });
  
  // Add more test cases as needed
});
